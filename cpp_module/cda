 while(true){
        std::cout << "Enter a command: [ADD / SEARCH / EXIT]" << std::endl;
        std::getline(std::cin, cmd);
        if (cmd == "EXIT" || std::cin.eof()){
            exit(0);
        }
        else if (cmd == "ADD"){
            pb.add_contact();
        }
        else if (cmd == "SEARCH"){
            pb.search_contact();
        }
        else
            std::cout << "Error: Invalid command" << std::endl;
        if (std::cin.eof()){
            clearerr(stdin);
            std::cin.clear();
        }

std::string	Contact::get_first_name() const{
	return (this->first_name);
}

void	Contact::set_first_name(std::string str){
	this->first_name = str;
}

#ifndef CONTACT_HPP
# define CONTACT_HPP

class Contact {
	public:
		Contact();
		~Contact();

    	std::string	get_first_name() const;
		std::string	get_last_name() const;
		std::string	get_nickname() const;
		std::string	get_phone_number() const;
		std::string	get_darkest_secret() const;

		void		set_first_name(std::string str);
		void		set_last_name(std::string str);
		void		set_nickname(std::string str);
		void		set_phone_number(std::string str);
		void		set_darkest_secret(std::string str);

	private:
		std::string first_name;
		std::string last_name;
		std::string nickname;
		std::string phone_number;
		std::string	darkest_secret;
};

#endif

#ifndef PHONEBOOK_HPP
# define PHONEBOOK_HPP

#include "Contact.hpp"
#include <iomanip>

class PhoneBook{
    public:
        PhoneBook();
        ~PhoneBook();

        void    add_contact();
        void    search_contact();
    private:
        Contact contacts[8];
        int     index;
        int     n_contacts;
};

#endif

#include "PhoneBook.hpp"

PhoneBook::PhoneBook(){
    index = 0;
    n_contacts = 0;
}

PhoneBook::~PhoneBook() {}

void    PhoneBook::add_contact(){
    Contact     contact;
    std::string input;

    if (index == 8)
        index = 0;

    std::cout << "Enter a first name" << std::endl;
    std::getline(std::cin, input);
    contact.set_first_name(input);
    
    std::cout << "Enter a last name" << std::endl;
    std::getline(std::cin, input);
    contact.set_last_name(input);

    std::cout << "Enter a nickname" << std::endl;
    std::getline(std::cin, input);
    contact.set_nickname(input);

    std::cout << "Enter a phone number" << std::endl;
    std::getline(std::cin, input);
    contact.set_phone_number(input);

    std::cout << "Enter a darkest secret" << std::endl;
    std::getline(std::cin, input);
    contact.set_darkest_secret(input);
        
    if (std::cin.eof()){
        std::cout << "Input cancelled" << std::endl;
        return ;
    }
    contacts[index] = contact;
    index++;
    if (n_contacts < 8)
        n_contacts++;
}

void    print_cut_str(std::string str){
    if (str.length() < 11)
        std::cout << "|" << std::setw(10) << str;
    else
        std::cout << "|" << str.substr(0, 9) + ".";
}

void    PhoneBook::search_contact() {
    int idx;

    if (n_contacts == 0){
        std::cout << "The phonebook is currently empty." << std::endl;
        return ;
    }

    for (int i = 0; i < n_contacts; i++){
        std::cout << std::setw(10) << i + 1;
        print_cut_str(contacts[i].get_first_name());
        print_cut_str(contacts[i].get_last_name());
        print_cut_str(contacts[i].get_nickname());
        std::cout << "|" << std::endl;
    }

    std::cout << "\nEnter an index of the entry to display" << std::endl;
    std::cin >> idx;
    if (std::cin.eof()){
        std::cout << "Input cancelled" << std::endl;
        return ;
    }
    if (std::cin.fail() || idx < 1 || idx > n_contacts){
        std::cout << "Error: invalid contact index" << std::endl;
        std::cin.clear();
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        return ;
    }
    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');

    std::cout << "-------------------------" << std::endl;
    std::cout << "First name: " << contacts[idx - 1].get_first_name() << std::endl;
    std::cout << "Last name: " << contacts[idx - 1].get_last_name() << std::endl;
    std::cout << "Nickname: " << contacts[idx - 1].get_nickname() << std::endl;
    std::cout << "Phone Number: " << contacts[idx - 1].get_phone_number() << std::endl;
    std::cout << "Darkest secret: " << contacts[idx - 1].get_darkest_secret() << std::endl;
    std::cout << "-------------------------" << std::endl;
}
